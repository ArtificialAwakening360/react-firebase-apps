{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["firebase","initializeApp","configData","auth","firestore","SignOut","currentUser","type","className","onClick","signOut","SignIn","provider","GoogleAuthProvider","signInWithPopup","ChatMessage","props","message","text","uid","photoURL","messageClass","src","alt","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","add","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","key","id","ref","onSubmit","value","onChange","target","placeholder","disabled","role","aria-label","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0pBAWAA,IAASC,cAAcC,GAEvB,IAAMC,EAAOH,IAASG,OAChBC,EAAYJ,IAASI,YAE3B,SAASC,IACP,OAAOF,EAAKG,aACV,4BAAQC,KAAK,SAASC,UAAU,WAAWC,QAAS,kBAAMN,EAAKO,YAA/D,YAIJ,SAASC,IAMP,OACE,oCACE,4BAAQJ,KAAK,SAASC,UAAU,UAAUC,QAPrB,WACvB,IAAMG,EAAW,IAAIZ,IAASG,KAAKU,mBACnCV,EAAKW,gBAAgBF,KAKnB,uBACA,uGAKN,SAASG,EAAYC,GACnB,IAAQC,EAAYD,EAAZC,QACAC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,IAAKC,EAAaH,EAAbG,SAEbC,EAAeF,IAAQhB,EAAKG,YAAYa,IAAM,OAAS,WAE7D,OACE,oCACE,yBAAKX,UAAS,kBAAaa,IACzB,yBAAKC,IAAKF,GAAY,wDAAyDG,IAAI,WACnF,2BAAIL,KAMZ,SAASM,IACP,IAAMC,EAAQC,mBACRC,EAAcvB,EAAUwB,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAErD,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQtC,EAAKG,YAAvBa,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZO,EAAYe,IAAI,CACpBxB,KAAMkB,EACNO,UAAW3C,IAASI,UAAUwC,WAAWC,kBACzC1B,MACAC,aATgB,OAYlBiB,EAAa,IACbZ,EAAMqB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OACE,oCACE,8BAEGd,GAAYA,EAASe,KAAI,SAACC,GAAD,OAAS,kBAACnC,EAAD,CAAaoC,IAAKD,EAAIE,GAAInC,QAASiC,OAEtE,0BAAMG,IAAK5B,KAIb,0BAAM6B,SAAUhB,GAEd,2BAAOiB,MAAOnB,EAAWoB,SAAU,SAACjB,GAAD,OAAOF,EAAaE,EAAEkB,OAAOF,QAAQG,YAAY,uBAEpF,4BAAQnD,KAAK,SAASoD,UAAWvB,GAAW,0BAAMwB,KAAK,MAAMC,aAAW,SAA5B,yBA4BrCC,MAjBf,WACE,MAAeC,YAAa5D,GAArB6D,EAAP,oBAEA,OACE,yBAAKxD,UAAU,OACb,gCACE,4BAAI,0BAAMoD,KAAK,MAAMC,aAAW,SAA5B,yCACJ,kBAACxD,EAAD,OAGF,iCACG2D,EAAO,kBAACxC,EAAD,MAAe,kBAACb,EAAD,SCrGXsD,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,kB","file":"static/js/main.e6510ced.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './App.css';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport PropTypes from 'prop-types';\r\nimport firebase from 'firebase/app';\r\nimport configData from './firebase-config.json';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nfirebase.initializeApp(configData);\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\nfunction SignOut() {\r\n  return auth.currentUser && (\r\n    <button type=\"button\" className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\r\n  );\r\n}\r\n\r\nfunction SignIn() {\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button type=\"button\" className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\r\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ChatMessage(props) {\r\n  const { message } = props;\r\n  const { text, uid, photoURL } = message;\r\n\r\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  return (\r\n    <>\r\n      <div className={`message ${messageClass}`}>\r\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} alt=\"Avatar\" />\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ChatRoom() {\r\n  const dummy = useRef();\r\n  const messagesRef = firestore.collection('messages');\r\n  const query = messagesRef.orderBy('createdAt').limit(25);\r\n\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n\r\n  const [formValue, setFormValue] = useState('');\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL } = auth.currentUser;\r\n\r\n    await messagesRef.add({\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL,\r\n    });\r\n\r\n    setFormValue('');\r\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n\r\n        {messages && messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\r\n\r\n        <span ref={dummy} />\r\n\r\n      </main>\r\n\r\n      <form onSubmit={sendMessage}>\r\n\r\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\r\n\r\n        <button type=\"submit\" disabled={!formValue}><span role=\"img\" aria-label=\"Enter\">üïäÔ∏è</span></button>\r\n\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nChatMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction App() {\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1><span role=\"img\" aria-label=\"Title\">‚öõÔ∏èüî•üí¨</span></h1>\r\n        <SignOut />\r\n      </header>\r\n\r\n      <section>\r\n        {user ? <ChatRoom /> : <SignIn />}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      const reg = registration;\n      reg.onupdatefound = () => {\n        const installingWorker = reg.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              ); */\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(reg);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // console.log('Content is cached for offline use.');\n\n              // Execute callback\n              // if (config && config.onSuccess) {\n              //  config.onSuccess(reg);\n              // }\n            }\n          }\n        };\n      };\n    });\n  // .catch((error) => {\n  //  console.error('Error during service worker registration:', error);\n  // });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // console.log(\n      //  'No internet connection found. App is running in offline mode.',\n      // );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // console.log(\n          //  'This web app is being served cache-first by a service '\n          //    + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          // );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      });\n    // .catch((error) => {\n    //  console.error(error.message);\n    // });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}